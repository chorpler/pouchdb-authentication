{"version":3,"file":"index.es.js","sources":["../src/utils.ts","../src/admins.ts","../src/authentication.ts","../src/users.ts","../src/plugin.ts"],"sourcesContent":["import   * as PouchDB      from \"pouchdb-core\"          ;\nimport { btoa             } from \"pouchdb-binary-utils\" ;\nimport { Headers, fetch   } from \"pouchdb-fetch\"        ;\nimport { assign, parseUri } from \"pouchdb-utils\"        ;\n\ninterface AuthHeader {\n  username?:string;\n  password?:string;\n}\n\ninterface PDBOpts {\n  adapter?:string;\n  skip_setup?:boolean;\n  auth?:AuthHeader;\n  prefix?:string;\n  deterministic_revs?:boolean;\n  name?:string;\n}\n\ninterface UserContext {\n  name: string;\n  roles?: string[];\n}\n\ninterface User extends UserContext {\n}\n\ninterface PouchDBUserDoc extends User {\n  _id?:string;\n  _rev?:string;\n  [propName:string]:any;\n}\n\ninterface LoginResponse extends PouchDB.Core.BasicResponse, UserContext {\n}\n\ninterface SessionResponse extends PouchDB.Core.BasicResponse {\n  info: {\n    authenticated: string;\n    authentication_db: string;\n    authentication_handlers: string[];\n  };\n  userCtx: UserContext;\n}\n\ninterface PutUserOptions extends PouchDB.Core.Options {\n  metadata?: any;\n  roles?: string[];\n}\n\ninterface CouchNodeMembership {\n  all_nodes:string[];\n  cluster_nodes:string[];\n}\n\ninterface Database<Content extends {} = {}> extends PouchDB.Static {\n    /**\n     * Log in an existing user.\n     * Throws an error if the user doesn't exist yet, the password is wrong, the HTTP server is unreachable, or a meteor struck your computer.\n     */\n  logIn(username: string, password: string,\n        options?: PouchDB.Core.Options): Promise<LoginResponse>;\n\n  /**\n   * Logs out whichever user is currently logged in.\n   * If nobody's logged in, it does nothing and just returns `{\"ok\" : true}`.\n   */\n  logOut(): Promise<PouchDB.Core.BasicResponse>;\n\n  /**\n   * Returns information about the CouchDB node membership of the server for the current database.\n   */\n  getMembership(options?:LoginOptions):Promise<CouchNodeMembership>;\n\n  /**\n   * Returns information about the current session.\n   * In other words, this tells you which user is currently logged in.\n   */\n  getSession(): Promise<SessionResponse>;\n\n  /**\n   * Sign up a new user who doesn't exist yet.\n   * Throws an error if the user already exists or if the username is invalid, or if some network error occurred.\n   * CouchDB has some limitations on user names (e.g. they cannot contain the character `:`).\n   */\n  signUp(username: string, password: string,\n        options?: PutUserOptions): Promise<PouchDB.Core.Response>;\n\n  /**\n   * Returns the user document associated with a username.\n   * (CouchDB, in a pleasing show of consistency, stores users as JSON documents in the special `_users` database.)\n   * This is the primary way to get metadata about a user.\n   */\n  getUser(username: string, options?: PouchDB.Core.Options):Promise<PouchDB.Core.Document<Content & User> & PouchDB.Core.GetMeta>;\n  // getUser(username: string, options?: PouchDB.Core.Options):Promise<PouchDBUserDoc>;\n\n  /**\n   * Update the metadata of a user.\n   */\n  putUser(username: string, options?: PutUserOptions): Promise<PouchDB.Core.Response>;\n\n  /**\n   * Delete a user.\n   */\n  deleteUser(username: string,\n            options?: PouchDB.Core.Options): Promise<PouchDB.Core.Response>;\n\n  /**\n   * Set new `password` for user `username`.\n   */\n  changePassword(username: string, password: string,\n                options?: PouchDB.Core.Options): Promise<PouchDB.Core.Response>;\n\n  /**\n   * Renames `oldUsername` to `newUsername`.\n   */\n  changeUsername(oldUsername: string, newUsername: string,\n                options?: PouchDB.Core.Options): Promise<PouchDB.Core.Response>;\n\n  /**\n   * Sign up a new admin.\n   */\n  signUpAdmin(username: string, password: string,\n              options?: PutUserOptions): Promise<string>;\n\n  /**\n   * Delete an admin.\n   */\n  deleteAdmin(username: string, options?: PouchDB.Core.Options): Promise<string>;\n}\n\ntype PouchDatabase = Database<any>;\n\ninterface PDB extends PouchDatabase {\n  __opts:PDBOpts;\n  prefix?:string;\n  type():string;\n}\n\nconst getBaseUrl = function(db:PDB):string {\n  // Use PouchDB.defaults' prefix, if any\n  let fullName:string;\n  if(db && db.prefix && ['http', 'https'].indexOf(db.type()) === -1) {\n    let prefix:string = db.prefix;\n    fullName = prefix + (prefix.endsWith('/') ? '' : '/') + db.name;\n  } else {\n    fullName = db.name;\n  }\n\n  let uri:any = parseUri(fullName);\n\n  // Compute parent path for databases not hosted on domain root (see #215)\n  let path:string = uri.path;\n  let normalizedPath:string = path.endsWith('/') ? path.substr(0, -1) : path;\n  let parentPath:string = normalizedPath.split('/').slice(0, -1).join('/');\n\n  let baseURL:string = uri.protocol + '://' +\n      uri.host +\n      (uri.port ? ':' + uri.port : '') +\n      parentPath;\n  // console.log(`getBaseUrl(): Base URL is '${baseURL}'`);\n  return baseURL;\n}\n\nfunction getBasicAuthHeaders(db:PDB):Headers {\n  let auth:AuthHeader;\n  if(db.__opts && db.__opts.auth) {\n    auth = db.__opts.auth;\n  } else {\n    let uri:any = parseUri(db.name);\n    if(uri.user || uri.password) {\n      auth = {\n        username: uri.user,\n        password: uri.password,\n      };\n    }\n  }\n\n  if(!auth) {\n    return new Headers();\n  }\n\n  let str:string = auth.username + ':' + auth.password;\n  let token:string = btoa(decodeURIComponent(encodeURIComponent(str)));\n\n  let headers:Headers = new Headers();\n  headers.set('Authorization', 'Basic ' + token);\n\n  return headers;\n}\n\nasync function doFetch(db:PDB, url:string, opts:any):Promise<any> {\n  try {\n    opts = assign(opts || {});\n    let newurl:string;\n    let baseURL:string;\n    let RESERVED_KEYS:string[] = [\n      '/_session',\n      '/_active_tasks',\n      '/_all_dbs',\n      '/_dbs_info',\n      '/_cluster_setup',\n      '/_db_updates',\n      '/_membership',\n      '/_replicate',\n      '/_scheduler',\n      '/_node',\n      '/_utils',\n      '/_up',\n      '/_uuids',\n      '/favicon.ico',\n    ];\n    if(RESERVED_KEYS.indexOf(url) > -1) {\n      baseURL = getBaseUrl(db);\n    } else {\n      baseURL = db.name;\n    }\n\n    if(url[0] === \"/\") {\n      newurl = baseURL + url;\n    } else {\n      newurl = baseURL + \"/\" + url;\n    }\n    // if(url[0] === '/') {\n    //   newurl = \"..\" + url;\n    // }\n\n    // console.log(`doFetch(): DB is: `, db);\n    // console.log(`doFetch(): URL is: `, url);\n    // console.log(`doFetch(): opts is: `, opts);\n    \n    if(opts.body && typeof opts.body !== 'string') {\n      opts.body = JSON.stringify(opts.body);\n    }\n  \n    // let res:Response = await db.fetch(newurl, opts);\n    let res:Response = await fetch(newurl, opts);\n    let ok:boolean = res.ok;\n    let content:any = await res.json();\n    // if(ok) {\n    //   callback(null, content);\n    // } else {\n    //   content.name = content.error;\n    //   callback(content);\n    // }\n    // return res;\n    if(ok) {\n      return content;\n    } else {\n      let text:string = \"fetch result not ok\";\n      let errText:string = content && typeof content.error === 'string' ? content.error : content && typeof content.message === 'string' ? content.message : typeof content === 'string' ? content : \"unknown_error\";\n      let finalErrorText:string =  `${text}: '${errText}'`;\n      let err:Error = new Error(finalErrorText);\n      throw err;\n    }\n  } catch(err) {\n    if(err && err.name === 'unknown_error') {\n      err.message = (err.message + ' ' || '') +\n          'Unknown error!  Did you remember to enable CORS?';\n    }\n    // callback(err);\n    throw err;\n  }\n}\n\nclass AuthError extends Error {\n  public status:number = 400;\n  public name:string = \"authentication_error\";\n  public message:string = \"\";\n  public error:boolean = true;\n  public taken:boolean = false;\n  constructor(msg?:string) {\n    super(msg);\n    if(msg) {\n      this.message = msg;\n    }\n    Error.captureStackTrace(this);\n    return this;\n  }\n}\n\n// function AuthError(message:string):void {\n//   this.status = 400;\n//   this.name = 'authentication_error';\n//   this.message = message;\n//   this.error = true;\n//   try {\n//     Error.captureStackTrace(this, AuthError);\n//   } catch (e) {}\n// }\n\n// inherits(AuthError, Error);\ntype LoginOptions = PouchDB.Core.Options;\ntype BasicResponse = PouchDB.Core.BasicResponse;\nexport {\n  AuthError,\n  doFetch,\n  getBasicAuthHeaders,\n  getBaseUrl,\n  AuthHeader,\n  PDBOpts,\n  UserContext,\n  User,\n  PDB,\n  PouchDBUserDoc,\n  LoginOptions,\n  LoginResponse,\n  BasicResponse,\n  SessionResponse,\n  PutUserOptions,\n  CouchNodeMembership,\n};\n","import { AuthError           } from './utils'       ;\nimport { PDB                 } from './utils'       ;\nimport { PouchDBUserDoc      } from './utils'       ;\nimport { PutUserOptions      } from './utils'       ;\nimport { BasicResponse       } from './utils'       ;\nimport { LoginOptions        } from './utils'       ;\nimport { CouchNodeMembership } from './utils'       ;\nimport { doFetch             } from './utils'       ;\nimport { getBasicAuthHeaders } from './utils'       ;\nimport { getBaseUrl          } from './utils'       ;\nimport { assign              } from 'pouchdb-utils' ;\nimport { toPromise           } from 'pouchdb-utils' ;\n\n\nconst getConfigUrl = function(db:PDB, nodeName?:string):string {\n  return (nodeName ? '/_node/' + nodeName : '') + '/_config';\n}\n\nconst getMembership = async function(opts:LoginOptions):Promise<CouchNodeMembership> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    let dbURL:string = getBaseUrl(db);\n    let url:string = dbURL + '/_membership';\n    let ajaxOpts:any = assign({\n      method: 'GET',\n      headers: getBasicAuthHeaders(db),\n    }, options.ajax || {});\n    let res:CouchNodeMembership = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst signUpAdmin = async function(username:string, password:string, opts:LoginOptions):Promise<BasicResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if(['http', 'https'].indexOf(db.type()) === -1) {\n      let err:AuthError = new AuthError('This plugin only works for the http/https adapter. So you should use new PouchDB(\"http://mysite.com:5984/mydb\") instead.');\n      throw err;\n    } else if(!username) {\n      let err:AuthError = new AuthError('You must provide a username');\n      throw err;\n    } else if(!password) {\n      let err:AuthError = new AuthError('You must provide a password');\n      throw err;\n    }\n\n    let membership:CouchNodeMembership\n    let nodeName:string;\n    try {\n      membership = await db.getMembership(opts);\n      // This is a CouchDB 2.x server\n      nodeName = membership.all_nodes[0];\n    } catch(err) {\n      if(err.error && err.error === 'illegal_database_name') {\n        throw err;\n      } else {\n        // This could be a CouchDB 1.x server\n        nodeName = undefined;\n      }\n    }\n    let configUrl:string = getConfigUrl(db, nodeName);\n    let url:string = (options.configUrl || configUrl) + '/admins/' + encodeURIComponent(username);\n    let ajaxOpts:any = assign({\n      method: 'PUT',\n      processData: false,\n      headers: getBasicAuthHeaders(db),\n      body: '\"' + password + '\"',\n    }, options.ajax || {});\n    let res:BasicResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst deleteAdmin = async function(username:string, opts:LoginOptions):Promise<BasicResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if(['http', 'https'].indexOf(db.type()) === -1) {\n      let err:AuthError = new AuthError('This plugin only works for the http/https adapter. So you should use new PouchDB(\"http://mysite.com:5984/mydb\") instead.');\n      throw err;\n    } else if(!username) {\n      let err:AuthError = new AuthError('You must provide a username');\n      throw err;\n    }\n  \n    let membership:CouchNodeMembership\n    let nodeName:string;\n    try {\n      membership = await db.getMembership(opts);\n      // This is a CouchDB 2.x server\n      nodeName = membership.all_nodes[0];\n    } catch(err) {\n      if(err.error && err.error === 'illegal_database_name') {\n        throw err;\n      } else {\n        // This could be a CouchDB 1.x server\n        nodeName = undefined;\n      }\n    }\n    let configUrl:string = getConfigUrl(db, nodeName);\n    let url:string = (options.configUrl || configUrl) + '/admins/' + encodeURIComponent(username);\n    let ajaxOpts:any = assign({\n      method: 'DELETE',\n      processData: false,\n      headers: getBasicAuthHeaders(db),\n    }, options.ajax || {});\n\n    let res:BasicResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nexport { getMembership, deleteAdmin, signUpAdmin };","import { AuthError           } from './utils'       ;\nimport { PDB                 } from './utils'       ;\nimport { LoginOptions        } from './utils'       ;\nimport { LoginResponse       } from './utils'       ;\nimport { BasicResponse       } from './utils'       ;\nimport { SessionResponse     } from './utils'       ;\nimport { doFetch             } from './utils'       ;\nimport { getBasicAuthHeaders } from './utils'       ;\nimport { assign, toPromise   } from 'pouchdb-utils' ;\nimport { Headers             } from 'pouchdb-fetch' ;\n\nconst logIn = async function(username:string, password:string, opts:LoginOptions):Promise<LoginResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if(['http', 'https'].indexOf(db.type()) === -1) {\n      // return callback(new AuthError('this plugin only works for the http/https adapter'));\n      let err:Error = new Error(\"pouchdb-authentication plugin only works for the http/https adapter\");\n      throw err;\n    }\n  \n    if(!username) {\n      // return callback(new AuthError('you must provide a username'));\n      let err:Error = new Error(\"you must provide a username\");\n      throw err;\n    } else if (!password) {\n      // return callback(new AuthError('you must provide a password'));\n      let err:Error = new Error(\"you must provide a password\");\n      throw err;\n    }\n  \n    let url:string = '/_session';\n    let headers:Headers = getBasicAuthHeaders(db);\n    headers.append('Content-Type', 'application/json');\n    let ajaxOpts:any = assign({\n      method: 'POST',\n      // headers: assign({'Content-Type': 'application/json'}, getBasicAuthHeaders(db)),\n      headers: headers,\n      body: {name: username, password: password},\n    }, options.ajax || {});\n\n    let res:LoginResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst logOut = async function (opts:LoginOptions):Promise<BasicResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    let url:string = '/_session';\n    let ajaxOpts:any = assign({\n      method: 'DELETE',\n      headers: getBasicAuthHeaders(db),\n    }, options.ajax || {});\n  \n    let res:BasicResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst getSession = async function ():Promise<SessionResponse> {\n  try {\n    let db:PDB = this;\n    let url:string = '/_session';\n    let ajaxOpts:any = {\n      method: 'GET',\n      headers: getBasicAuthHeaders(db),\n    };\n    let res:SessionResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nexport { logIn, logOut, getSession };\n","import { AuthError           } from './utils'       ;\nimport { PDB                 } from './utils'       ;\nimport { PouchDBUserDoc      } from './utils'       ;\nimport { PutUserOptions      } from './utils'       ;\nimport { BasicResponse       } from './utils'       ;\nimport { LoginOptions        } from './utils'       ;\nimport { doFetch             } from './utils'       ;\nimport { getBasicAuthHeaders } from './utils'       ;\nimport { getBaseUrl          } from './utils'       ;\nimport { assign              } from 'pouchdb-utils' ;\nimport { clone               } from 'pouchdb-utils' ;\nimport { toPromise           } from 'pouchdb-utils' ;\n\nimport * as PouchDB from 'pouchdb-core';\n\nconst getUsersDatabaseUrl = function():string {\n  let db:PDB = this;\n  return getBaseUrl(db) + '/_users';\n};\n\nconst updateUser = async function(db:PDB, user:PouchDBUserDoc, opts:PutUserOptions):Promise<BasicResponse> {\n  try {\n    let options:any = opts != undefined ? opts : {};\n    let reservedWords:string[] = [\n      '_id',\n      '_rev',\n      'name',\n      'type',\n      'roles',\n      'password',\n      'password_scheme',\n      'iterations',\n      'derived_key',\n      'salt',\n    ];\n  \n    if(opts.metadata) {\n      for(let key in opts.metadata) {\n        if(opts.metadata.hasOwnProperty(key) && reservedWords.indexOf(key) !== -1) {\n          let err:AuthError = new AuthError('cannot use reserved word in metadata: \"' + key + '\"');\n          throw err;\n        }\n      }\n      user = assign(user, opts.metadata);\n    }\n  \n    if(opts.roles) {\n      user = assign(user, {roles: opts.roles});\n    }\n  \n    let url:string = '/_users/' + encodeURIComponent(user._id);\n    let ajaxOpts:any = assign({\n      method: 'PUT',\n      body: user,\n      headers: getBasicAuthHeaders(db),\n    }, options.ajax || {});\n  \n    let res:BasicResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst signUp = async function (username:string, password:string, opts:PutUserOptions):Promise<BasicResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if(['http', 'https'].indexOf(db.type()) === -1) {\n      let err:AuthError = new AuthError('This plugin only works for the http/https adapter. So you should use new PouchDB(\"http://mysite.com:5984/mydb\") instead.');\n      throw err;\n    } else if (!username) {\n      let err:AuthError = new AuthError('You must provide a username');\n      throw err;\n    } else if (!password) {\n      let err:AuthError = new AuthError('You must provide a password');\n      throw err;\n    }\n  \n    let userId:string = 'org.couchdb.user:' + username;\n    let user:PouchDBUserDoc = {\n      name: username,\n      password: password,\n      roles: [],\n      type: 'user',\n      _id: userId,\n    };\n  \n    let res:BasicResponse = await updateUser(db, user, options);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst getUser = async function(username:string, opts:LoginOptions):Promise<PouchDBUserDoc> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if(!username) {\n      let err:AuthError = new AuthError('you must provide a username');\n      throw err;\n    }\n  \n    let url:string = '/_users/' + encodeURIComponent('org.couchdb.user:' + username);\n    let ajaxOpts:any = assign({\n      method: 'GET',\n      headers: getBasicAuthHeaders(db),\n    }, options.ajax || {});\n  \n    let res:PouchDBUserDoc = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst putUser = async function (username:string, opts:PutUserOptions):Promise<BasicResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if(['http', 'https'].indexOf(db.type()) === -1) {\n      let err:AuthError = new AuthError('This plugin only works for the http/https adapter. So you should use new PouchDB(\"http://mysite.com:5984/mydb\") instead.');\n      throw err;\n    } else if(!username) {\n      let err:AuthError = new AuthError('You must provide a username');\n      throw err;\n    }\n  \n    let user:PouchDBUserDoc = await db.getUser(username, options);\n    let res:BasicResponse = await updateUser(db, user, options);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst deleteUser = async function(username:string, opts:LoginOptions):Promise<BasicResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if (['http', 'https'].indexOf(db.type()) === -1) {\n      let err:AuthError = new AuthError('This plugin only works for the http/https adapter. So you should use new PouchDB(\"http://mysite.com:5984/mydb\") instead.');\n      throw err;\n    } else if(!username) {\n      let err:AuthError = new AuthError('You must provide a username');\n      throw err;\n    }\n  \n    let user:PouchDBUserDoc = await db.getUser(username, options);\n    let url:string = '/_users/' + encodeURIComponent(user._id) + '?rev=' + user._rev;\n    let ajaxOpts:any = assign({\n      method: 'DELETE',\n      headers: getBasicAuthHeaders(db),\n    }, options.ajax || {});\n    let res:BasicResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst changePassword = async function(username:string, password:string, opts:LoginOptions):Promise<BasicResponse> {\n  try {\n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    if(['http', 'https'].indexOf(db.type()) === -1) {\n      let err:AuthError = new AuthError('This plugin only works for the http/https adapter. So you should use new PouchDB(\"http://mysite.com:5984/mydb\") instead.');\n      throw err;\n    } else if(!username) {\n      let err:AuthError = new AuthError('You must provide a username');\n      throw err;\n    } else if(!password) {\n      let err:AuthError = new AuthError('You must provide a password');\n      throw err;\n    }\n\n    let user:PouchDBUserDoc = await db.getUser(username, options);\n    user.password = password;\n    let url:string = '/_users/' + encodeURIComponent(user._id);\n    let ajaxOpts:any = assign({\n      method: 'PUT',\n      headers: getBasicAuthHeaders(db),\n      body: user,\n    }, options.ajax || {});\n    let res:BasicResponse = await doFetch(db, url, ajaxOpts);\n    return res;\n  } catch(err) {\n    throw err;\n  }\n};\n\nconst changeUsername = async function(oldUsername:string, newUsername:string, opts:PutUserOptions):Promise<BasicResponse> {\n  try {\n    \n    let db:PDB = this;\n    let options:any = opts != undefined ? opts : {};\n    let USERNAME_PREFIX:string = 'org.couchdb.user:';\n    const fetch = async function(url:string, opts:LoginOptions):Promise<BasicResponse> {\n      try {\n        let options:any = opts != undefined ? opts : {};\n        let res:BasicResponse = await doFetch(db, url, options);\n        return res; \n      } catch(err) {\n        throw err;\n      }\n    };\n    const updateUser = async function(user:PouchDBUserDoc, opts:LoginOptions):Promise<BasicResponse> {\n      try {\n        let options:any = opts != undefined ? opts : {};\n        let url:string = '/_users/' + encodeURIComponent(user._id);\n        let updateOpts:any = assign({\n          method: 'PUT',\n          headers: getBasicAuthHeaders(db),\n          body: user,\n        }, options.ajax || {});\n    \n        let res:BasicResponse = await fetch(url, updateOpts);\n        return res;\n      } catch(err) {\n        throw err;\n      }\n    };\n    options.ajax = options.ajax || {};\n    if(['http', 'https'].indexOf(db.type()) === -1) {\n      let err:AuthError = new AuthError('This plugin only works for the http/https adapter. So you should use new PouchDB(\"http://mysite.com:5984/mydb\") instead.');\n      throw err;\n    }\n    if(!newUsername) {\n      let err:AuthError = new AuthError('You must provide a new username');\n      throw err;\n    }\n    if(!oldUsername) {\n      let err:AuthError = new AuthError('You must provide a username to rename');\n      throw err;\n    }\n    try {\n      let res:PouchDBUserDoc = await db.getUser(newUsername, options);\n      let err:AuthError = new AuthError('user already exists');\n      err.taken = true;\n      throw err;\n    } catch(err) {\n      try {\n        let user:PouchDBUserDoc = await db.getUser(oldUsername, options);\n        let newUser:PouchDBUserDoc = clone(user);\n        delete newUser._rev;\n        newUser._id = USERNAME_PREFIX + newUsername;\n        newUser.name = newUsername;\n        newUser.roles = options.roles || user.roles || [];\n        let res:BasicResponse = await updateUser(newUser, options);\n        user._deleted = true;\n        res = await updateUser(user, options);\n        return res;\n      } catch(err) {\n        throw err;\n      }\n    }\n  } catch(err) {\n    throw err;\n  }\n};\n\nexport {\n  getUsersDatabaseUrl,\n  signUp,\n  getUser,\n  putUser,\n  deleteUser,\n  changePassword,\n  changeUsername,\n};\n","declare const window:any;\n\nimport { deleteAdmin, getMembership, signUpAdmin } from \"./admins\";\nimport { getSession, logIn, logOut } from \"./authentication\";\nimport {\n  changePassword,\n  changeUsername,\n  deleteUser,\n  getUser,\n  getUsersDatabaseUrl,\n  putUser,\n  signUp,\n} from \"./users\";\n\nconst PouchDBAuthPlugin:any = {\n  login               : logIn               ,\n  logIn               : logIn               ,\n  logout              : logOut              ,\n  logOut              : logOut              ,\n  getSession          : getSession          ,\n  getMembership       : getMembership       ,\n  signUpAdmin         : signUpAdmin         ,\n  deleteAdmin         : deleteAdmin         ,\n  getUsersDatabaseUrl : getUsersDatabaseUrl ,\n  signup              : signUp              ,\n  signUp              : signUp              ,\n  getUser             : getUser             ,\n  putUser             : putUser             ,\n  deleteUser          : deleteUser          ,\n  changePassword      : changePassword      ,\n  changeUsername      : changeUsername      ,\n};\n\nconst plugin:any = PouchDBAuthPlugin;\nexport { plugin };\n// let var plugin:any = {};\n// plugin.login = logIn;\n// plugin.logIn = logIn;\n// plugin.logout = logOut;\n// plugin.logOut = logOut;\n// plugin.getSession = getSession;\n\n// plugin.getMembership = getMembership;\n// plugin.signUpAdmin = signUpAdmin;\n// plugin.deleteAdmin = deleteAdmin;\n\n// plugin.getUsersDatabaseUrl = getUsersDatabaseUrl;\n// plugin.signup = signUp;\n// plugin.signUp = signUp;\n// plugin.getUser = getUser;\n// plugin.putUser = putUser;\n// plugin.deleteUser = deleteUser;\n// plugin.changePassword = changePassword;\n// plugin.changeUsername = changeUsername;\n// export class PouchDBPlugin {\n//   public login = logIn;\n//   public logIn = logIn;\n//   public logout = logOut;\n//   public logOut = logOut;\n//   public getSession = getSession;\n//   public getMembership = getMembership;\n//   public signUpAdmin = signUpAdmin;\n//   public deleteAdmin = deleteAdmin;\n//   public getUsersDatabaseUrl = getUsersDatabaseUrl;\n//   public signup = signUp;\n//   public signUp = signUp;\n//   public getUser = getUser;\n//   public putUser = putUser;\n//   public deleteUser = deleteUser;\n//   public changePassword = changePassword;\n//   public changeUsername = changeUsername;\n//   constructor() {\n\n//   }\n// }\n\n// // let plugin:any = PouchDBPlugin;\n// let plugin:PouchDBPlugin = new PouchDBPlugin();\n\nif(typeof window !== 'undefined' && window.PouchDB) {\n  window.PouchDB.plugin(PouchDBAuthPlugin);\n}\n\n// export default plugin;\n// export plugin;\n"],"names":["tslib_1.__extends"],"mappings":"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"}